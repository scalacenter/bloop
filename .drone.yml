# We publishLocal the maven plugin instead of compile to check the maven plugin integration
# Only test sbt-bloop 1.x because of bug in `^`

matrix:
  TEST_BLOOP:
    - bin/sbt-ci.sh \
          "show version" \
          "benchmarks/compile" \
          "jsonConfig210/test" \
          "jsonConfig211/test" \
          "jsonConfig212/test" \
          "millBloop/compile" \
          "mavenBloop/compile" \
          "gradleBloop211/compile" \
          "gradleBloop212/compile" \
          "show schemaVersion" \
          "sbtBloop013/publishLocal" \
          "sbtBloop10/publishLocal" \
          "frontend/testOnly bloop.ScalaVersionsSpec" \
          "backend/test" \
          "jsBridge06/test" \
          "jsBridge10/test" \
          "jsBridge06/publishLocal" \
          "jsBridge10/publishLocal" \
          "frontend/runMain bloop.util.CommandsDocGenerator --test" \
          "frontend/runMain bloop.util.CommandsDocGenerator --out ../docs/cli-reference.md" \
          "frontend/testOnly -bloop.ScalaVersionsSpec" \
          "frontend/it:run" \
          "gradleBloop212/test" \
          "docs/run"
  TEST_BLOOP_JDK11:
    - bin/sbt-ci.sh \
          "show version" \
          "benchmarks/compile" \
          "jsonConfig210/test" \
          "jsonConfig211/test" \
          "jsonConfig212/test" \
          "millBloop/compile" \
          "mavenBloop/compile" \
          "sbtBloop013/publishLocal" \
          "sbtBloop10/publishLocal" \
          "frontend/testOnly bloop.ScalaVersionsSpec" \
          "backend/test" \
          "jsBridge10/test" \
          "jsBridge06/publishLocal" \
          "jsBridge10/publishLocal" \
          "frontend/testOnly -bloop.ScalaVersionsSpec"
  TEST_BLOOP_NATIVE:
    - bin/sbt-ci.sh \
          "nativeBridge03/test" \
          "nativeBridge04/test" \
          "nativeBridge03/publishLocal" \
          "nativeBridge04/publishLocal"

  RUN_COMMUNITY_BUILD_EXTRA:
    - bin/sbt-ci.sh \
          "sbtBloop013/publishLocal" \
          "sbtBloop10/publishLocal" \
          "frontend/it:run"

  RUN_BENCHMARKS_AND_SCRIPTED:
    - bin/sbt-ci.sh \
          "install" \
          "launcher/test" \
          "sbtBloop10Shaded/publishLocal" \
          "sbtBloop10/scripted" \
          "benchmarks/jmh:run .*HotBloopBenchmark.* -wi 0 -i 1 -f1 -t1 -p project=with-tests -p projectName=with-tests"

  PUBLISH_ARTIFACTS:
    - bin/sbt-ci-publish.sh \
          "show version" \
          "set pgpPublicRing in Global := file(\"/drone/.gnupg/pubring.asc\")" \
          "set pgpSecretRing in Global := file(\"/drone/.gnupg/secring.asc\")" \
          "releaseBloop" \
          "docs/docusaurusPublishGhpages"

  UPDATE_GITHUB_AND_INSTALLERS:
    - bin/sbt-ci.sh \
          "frontend/updateHomebrewFormula" \
          "frontend/updateScoopFormula" \
          "frontend/updateArchPackage" \
          "frontend/githubRelease"
  OS:
    - linux
  OPS:
    - basic
    - community-build
    - jdk11
    - extra
clone:
  git:
    image: plugins/git
    tags: true
    # We clone the submodules ourselves
    recursive: false

pipeline:
  clone:
    image: plugins/git
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux
    commands:
      - ./bin/ci-clone.sh

  restore-cache:
    image: drillster/drone-volume-cache
    restore: true
    mount:
      - /drone/.ivy2/cache
      - /drone/.ivy2/local
      - /drone/.coursier
      - /drone/.gradle
      - /drone/.sbt
      - /drone/.buildpress
      - /drone/.dodo
      - ./frontend/src/test/resources/simple-build/bloop-config
      - ./frontend/src/test/resources/simple-build/target/generation-cache-file
      - ./frontend/src/test/resources/compiler-plugin-whitelist/bloop-config
      - ./frontend/src/test/resources/compiler-plugin-whitelist/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scalajs-0.6/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scalajs-0.6/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scalajs-1.0/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scalajs-1.0/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.3/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.3/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.4/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.4/target/generation-cache-file
    volumes:
      - /cache:/cache
    cache_key: [ DRONE_REPO_OWNER, DRONE_REPO_NAME ]
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux

  build:
    image: scalacenter/scala-docs:1.4
    group: build
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux
        OPS: basic
    commands:
      - export DRONE_DIR="/drone"
      - git log --oneline --graph | head -n 20
      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
      - . bin/detect-community-build.sh # Source it because it exports variables
      - touch ~/.profile
      - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
      - curl -o- -L https://yarnpkg.com/install.sh | bash
      - yarn --help
      - ${TEST_BLOOP}
      - ${TEST_BLOOP_NATIVE}
      - . bin/check-good-practices.sh # Check that good practices in the repo hold

  build-jdk11:
    image: eed3si9n/scala-docs:1.6-M2
    group: build
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux
        OPS: jdk11
    commands:
      - export JAVA_HOME="/usr/lib/jvm/jdk11/bin"
      - export PATH="$JAVA_HOME:$PATH"
      - java -version
      - export DRONE_DIR="/drone"
      - git log --oneline --graph | head -n 20
      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
      - . bin/detect-community-build.sh # Source it because it exports variables
      - ${TEST_BLOOP_JDK11}
      - . bin/check-good-practices.sh # Check that good practices in the repo hold

  run_benchmarks_scripted:
    image: scalacenter/scala-docs:1.4
    group: build
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux
        OPS: extra
    commands:
      - export DRONE_DIR="/drone"
      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
      - git log --oneline --graph | head -n 20
      - ${RUN_BENCHMARKS_AND_SCRIPTED}

#  run_community_pipelined:
#    image: scalacenter/scala-docs:1.4
#    group: build
#    when:
#      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
#      matrix:
#        OS: linux
#        OPS: community-build
#    commands:
#      - export DRONE_DIR="/drone"
#      - export PIPELINE_COMMUNITY_BUILD="true"
#      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
#      - git log --oneline --graph | head -n 20
#      - . bin/detect-community-build.sh # Source it because it exports variables
#      - ${RUN_COMMUNITY_BUILD_EXTRA}

  publish:
    image: scalacenter/scala-docs:1.4
    secrets: [ sonatype_user, sonatype_password, pgp_password, bintray_user, bintray_pass, bloopoid_private_key ]
    volumes:
      - /scalacenter:/keys
    when:
      ref: [ refs/heads/master, refs/tags/* ]
      event: [ push, tag, deployment ]
      status: success
      matrix:
        OS: linux
        OPS: basic
    commands:
      - git log --oneline --graph | head -n 20
      # I have no idea why this has to be done manually... TODO: inspect why.
      - export DRONE_DIR="/drone"
      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
      - /usr/local/bin/setup_keys.sh
      - . bin/ci-setup-bloopoid-keys.sh
      - touch ~/.profile
      - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
      - curl -o- -L https://yarnpkg.com/install.sh | bash
      - yarn --help
      - git status # Print to see what may be polluting the git state
      - ${PUBLISH_ARTIFACTS}

  release:
    image: scalacenter/scala-docs:1.4
    secrets: [ bloopoid_github_token, bloopoid_private_key ]
    volumes:
      - /scalacenter:/keys
    when:
      ref: [ refs/heads/master, refs/tags/* ]
      event: [ tag ]
      status: success
      matrix:
        OS: linux
        OPS: basic
    commands:
      - export DRONE_DIR="/drone"
      - git status
      - . bin/set-up-community-build-infra.sh # Source it because it exports variables
      - . bin/ci-setup-bloopoid-keys.sh
      - echo "oauth = $BLOOPOID_GITHUB_TOKEN" > ~/.github
      - ${UPDATE_GITHUB_AND_INSTALLERS}

  rebuild-cache:
    image: drillster/drone-volume-cache
    when:
      ref: [ refs/heads/master, refs/tags/*, refs/pull/*/head ]
      matrix:
        OS: linux
        OPS: basic
    rebuild: true
    mount:
      - /drone/.ivy2/cache
      - /drone/.ivy2/local
      - /drone/.coursier
      - /drone/.gradle
      - /drone/.sbt
      - /drone/.dodo
      - /drone/.buildpress
      - ./frontend/src/test/resources/cross-test-build-scalajs-0.6/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scalajs-0.6/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scalajs-1.0/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scalajs-1.0/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.3/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.3/target/generation-cache-file
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.4/bloop-config
      - ./frontend/src/test/resources/cross-test-build-scala-native-0.4/target/generation-cache-file
    volumes:
      - /cache:/cache
    cache_key: [ DRONE_REPO_OWNER, DRONE_REPO_NAME ]
